name: Example Workflow

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Comma-separated environment variable pairs, e.g., dev=blue,dev=green'
        required: true
        default: 'dev=blue'
  schedule:
    - cron: '*/2 * * * *'

jobs:
  parse-env:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse-env.outputs.matrix }}
    env:
      SCHEDULE_ENV: dev=blue,dev=green
    steps:
      - name: Set env for schedule
        if: ${{ github.event_name == 'schedule' }}
        run: echo "env=${{ env.SCHEDULE_ENV }}" >> $GITHUB_ENV

      - name: Parse env input
        id: parse-env
        run: |
          env_pair="${{ github.event.inputs.env || env.SCHEDULE_ENV }}"
          matrix='[]'
          IFS=',' read -ra PAIRS <<< "$env_pair"
          for pair in "${PAIRS[@]}"; do
            IFS="=" read -r env_name env_value <<< "$pair"
            matrix=$(echo $matrix | jq --arg env_name "$env_name" --arg env_value "$env_value" '. += [{"env_name": $env_name, "env_value": $env_value}]')
          done
          echo "matrix=$(echo $matrix | jq -c)" >> $GITHUB_OUTPUT

  run-workflow:
    runs-on: ubuntu-latest
    needs: parse-env
    if: ${{ !contains(needs.parse-env.outputs.matrix, 'prod') }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse-env.outputs.matrix) }}

    steps:
      - name: Set environment variables
        env:
          domain: xyz.com
          rg: new
          container: hello
        run: |
          echo "We are running for each dev: ${{ matrix.env_name }}=${{ matrix.env_value }}"
          echo "domain=${{ matrix.env_name }}-${{ matrix.env_value }}.${{ env.domain }}" >> $GITHUB_ENV
          echo "rg=${{ matrix.env_name }}-${{ matrix.env_value }}.${{ env.rg }}" >> $GITHUB_ENV

      - name: Print environment variables
        run: |
          echo "Environment variables:"
          printenv | grep -E 'domain|rg'

  prod-run:
    runs-on: ubuntu-latest
    needs: parse-env
    if: ${{ contains(needs.parse-env.outputs.matrix, 'prod') }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse-env.outputs.matrix) }}

    steps:
      - name: Set prod environment variables
        env:
          domain: xyz.com
          rg: new
          container: hello
        run: |
          echo "We are running for each prod: ${{ matrix.env_name }}=${{ matrix.env_value }}"
          echo "domain=${{ matrix.env_name }}-${{ matrix.env_value }}.${{ env.domain }}" >> $GITHUB_ENV
          echo "rg=${{ matrix.env_name }}-${{ matrix.env_value }}.${{ env.rg }}" >> $GITHUB_ENV

      - name: Print prod environment variables
        run: |
          echo "Environment variables:"
          printenv | grep -E 'domain|rg'
