name: Example Workflow

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Comma-separated environment variable pairs, e.g., dev=blue,dev=green'
        required: true
        default: 'dev=blue'
      app:
        description: "Comma-separated list of application names"
        required: false
        default: 'nginx,new,old'

jobs:
  parse-env:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse-env.outputs.matrix }}
    steps:
      - name: Parse env input
        id: parse-env
        run: |
          env_pair="${{ github.event.inputs.env }}"
          app_list="${{ github.event.inputs.app }}"
          matrix='[]'
          IFS=',' read -ra PAIRS <<< "$env_pair"
          for pair in "${PAIRS[@]}"; do
            IFS="=" read -r env_name env_value <<< "$pair"
            if [[ "$env_name" == "prod" ]]; then
              IFS=',' read -ra APPS <<< "$app_list"
              for app in "${APPS[@]}"; do
                matrix=$(echo $matrix | jq --arg env_name "$env_name" --arg env_value "$env_value" --arg app "$app" '. += [{"env_name": $env_name, "env_value": $env_value, "app": $app}]')
              done
            else
              matrix=$(echo $matrix | jq --arg env_name "$env_name" --arg env_value "$env_value" '. += [{"env_name": $env_name, "env_value": $env_value}]')
            fi
          done
          echo "matrix=$(echo $matrix | jq -c)" >> $GITHUB_OUTPUT

  run-workflow:
    runs-on: ubuntu-latest
    needs: parse-env
    if: ${{ !contains(needs.parse-env.outputs.matrix, 'prod') }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse-env.outputs.matrix) }}
    steps:
      - name: Set environment variables
        env:
          domain: xyz.com
        run: |
          echo "We are running for dev: ${{ matrix.env_name }}=${{ matrix.env_value }}"
          echo "domain=${{ matrix.env_name }}-${{ matrix.env_value }}.${{ env.domain }}" >> $GITHUB_ENV
      - name: Print environment variables
        run: |
          echo "Environment variables:"
          printenv | grep -E 'domain'

  prod-run:
    runs-on: ubuntu-latest
    needs: parse-env
    if: ${{ contains(needs.parse-env.outputs.matrix, 'prod') }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse-env.outputs.matrix) }}
    steps:
      - name: Set prod environment variables
        env:
          domain: xyz.com
        run: |
          echo "We are running for prod: ${{ matrix.env_name }}=${{ matrix.env_value }} with app ${{ matrix.app }}"
          echo "domain=${{ matrix.env_name }}-${{ matrix.env_value }}.${{ env.domain }}" >> $GITHUB_ENV
      - name: Print prod environment variables
        run: |
          echo "Environment variables:"
          printenv | grep -E 'domain'
      - name: Run task env prod
        run: |
          echo "Running tasks for ${{ matrix.app }} in prod environment."
          if [ "$(check_cert_function ${{ matrix.app }})" == "exists" ]; then
            echo "Certificate exists for ${{ matrix.app }}. Uploading and binding."
            upload_function ${{ matrix.app }}
            bind_function ${{ matrix.app }}
          else
            echo "No certificate found for ${{ matrix.app }}"
          fi
